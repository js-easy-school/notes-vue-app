const express = require("express");
const fs = require("fs");
const cors = require("cors");
const bodyParser = require("body-parser");
const { Telegraf, Markup, session } = require("telegraf");
require("dotenv").config();
const axios = require("axios");
const dgram = require("dgram");

const app = express();
const PORT = process.env.PORT || 3030;
const NOTES_FILE = "./notes-data.json";
const BOT_TOKEN = process.env.BOT_TOKEN;
const NOTES_API = process.env.NOTES_API || `http://localhost:${PORT}`;

// MAC-–∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
const TARGET_MAC = "60:A4:4C:61:1C:79";

if (!BOT_TOKEN) {
  console.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å BOT_TOKEN –≤ .env");
  process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);

// Wake-on-LAN —Ñ—É–Ω–∫—Ü–∏—è
function wakeOnLan(macAddress) {
  const client = dgram.createSocket("udp4");

  const mac = macAddress.replace(/:/g, "").toLowerCase();
  const magicPacket = Buffer.alloc(102);

  for (let i = 0; i < 6; i++) {
    magicPacket[i] = 0xff;
  }

  for (let i = 1; i <= 16; i++) {
    for (let j = 0; j < 6; j++) {
      magicPacket[i * 6 + j] = parseInt(mac.substr(j * 2, 2), 16);
    }
  }

  client.send(
    magicPacket,
    0,
    magicPacket.length,
    9,
    "255.255.255.255",
    (err) => {
      if (err) {
        console.log("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Wake-on-LAN –ø–∞–∫–µ—Ç–∞:", err);
      } else {
        console.log("Wake-on-LAN –ø–∞–∫–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è MAC:", macAddress);
      }
      client.close();
    }
  );
}

// Express middleware
app.use(cors());
app.use(bodyParser.json());

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
function loadNotes() {
  if (!fs.existsSync(NOTES_FILE)) return {};
  try {
    return JSON.parse(fs.readFileSync(NOTES_FILE, "utf-8"));
  } catch {
    return {};
  }
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –≤ —Ñ–∞–π–ª
function saveNotes(data) {
  fs.writeFileSync(NOTES_FILE, JSON.stringify(data, null, 2), "utf-8");
}

// API endpoints
app.get("/notes", (req, res) => {
  const userId = req.query.userId;
  if (!userId) return res.status(400).json({ error: "userId required" });
  const notes = loadNotes();
  res.json(notes[userId] || []);
});

app.post("/notes", (req, res) => {
  const { userId, title, content } = req.body;
  if (!userId || !title)
    return res.status(400).json({ error: "userId and title required" });
  const notes = loadNotes();
  const newNote = {
    id: String(Date.now()),
    title,
    content: content || "",
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  };
  notes[userId] = notes[userId] || [];
  notes[userId].unshift(newNote);
  saveNotes(notes);
  res.json(newNote);
});

app.put("/notes/:id", (req, res) => {
  const { userId, title, content } = req.body;
  const noteId = req.params.id;
  if (!userId || !noteId)
    return res.status(400).json({ error: "userId and noteId required" });
  const notes = loadNotes();
  const userNotes = notes[userId] || [];
  const note = userNotes.find((n) => n.id === noteId);
  if (!note) return res.status(404).json({ error: "Note not found" });
  if (title !== undefined) note.title = title;
  if (content !== undefined) note.content = content;
  note.updatedAt = new Date().toISOString();
  saveNotes(notes);
  res.json(note);
});

app.delete("/notes/:id", (req, res) => {
  const userId = req.query.userId;
  const noteId = req.params.id;
  if (!userId || !noteId)
    return res.status(400).json({ error: "userId and noteId required" });
  const notes = loadNotes();
  notes[userId] = (notes[userId] || []).filter((n) => n.id !== noteId);
  saveNotes(notes);
  res.json({ success: true });
});

// Bot functions
async function fetchNotes(userId) {
  const res = await axios.get(`${NOTES_API}/notes`, { params: { userId } });
  return res.data;
}

async function createNote(userId, title, content) {
  const res = await axios.post(`${NOTES_API}/notes`, {
    userId,
    title,
    content,
  });
  return res.data;
}

async function updateNote(userId, id, title, content) {
  const res = await axios.put(`${NOTES_API}/notes/${id}`, {
    userId,
    title,
    content,
  });
  return res.data;
}

async function deleteNote(userId, id) {
  await axios.delete(`${NOTES_API}/notes/${id}`, { params: { userId } });
}

// Bot middleware
bot.use(session());

// Bot commands
bot.command("notes", async (ctx) => {
  ctx.session = ctx.session || {};
  ctx.session.searchMode = false;
  const notes = await fetchNotes(ctx.from.id);
  const buttons = [];
  if (notes.length > 0) {
    for (const note of notes) {
      buttons.push([
        Markup.button.callback(`üìù ${note.title}`, `open_${note.id}`),
        Markup.button.callback("‚ùå", `delete_${note.id}`),
      ]);
    }
  }
  buttons.push([
    Markup.button.callback("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", "create_note"),
    Markup.button.callback("üîç –ü–æ–∏—Å–∫", "search_notes"),
  ]);
  await ctx.reply(
    notes.length ? "–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:" : "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.",
    Markup.inlineKeyboard(buttons)
  );
});

// Power management commands
bot.command("power", async (ctx) => {
  await ctx.reply(
    "üîå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:",
    Markup.inlineKeyboard([
      [
        Markup.button.callback("üü¢ –í–∫–ª—é—á–∏—Ç—å", "power_on"),
        Markup.button.callback("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å", "power_off"),
      ],
      [Markup.button.callback("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", "power_restart")],
    ])
  );
});

// Power management actions
bot.action("power_on", async (ctx) => {
  await ctx.answerCbQuery("–û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥—É –≤–∫–ª—é—á–µ–Ω–∏—è...");
  wakeOnLan(TARGET_MAC);
  await ctx.reply("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä!");
});

bot.action("power_off", async (ctx) => {
  await ctx.answerCbQuery("–ö–æ–º–∞–Ω–¥–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ –∑–∞–º–µ—Ç–∫—É");
  await ctx.reply(
    "üìù –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–º–µ—Ç–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º 'windows' –∏ —Ç–µ–∫—Å—Ç–æ–º '–≤—ã–∫–ª—é—á–∏—Ç—å' –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞."
  );
});

bot.action("power_restart", async (ctx) => {
  await ctx.answerCbQuery("–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ –∑–∞–º–µ—Ç–∫—É");
  await ctx.reply(
    "üìù –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–º–µ—Ç–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º 'windows' –∏ —Ç–µ–∫—Å—Ç–æ–º '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å' –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞."
  );
});

// Bot actions
bot.action("search_notes", async (ctx) => {
  ctx.session = ctx.session || {};
  ctx.session.searchMode = true;
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:");
});

bot.action("create_note", async (ctx) => {
  ctx.session = ctx.session || {};
  ctx.session.creating = true;
  ctx.session.newTitle = null;
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏:");
});

bot.action(/open_(.+)/, async (ctx) => {
  ctx.session = ctx.session || {};
  const noteId = ctx.match[1];
  const notes = await fetchNotes(ctx.from.id);
  const note = notes.find((n) => n.id === noteId);
  if (!note) return ctx.answerCbQuery("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
  await ctx.replyWithMarkdown(
    `*${note.title}*
${note.content || "_(–ø—É—Å—Ç–æ)_"}`,
    Markup.inlineKeyboard([
      [Markup.button.callback("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", `edit_${note.id}`)],
    ])
  );
});

bot.action(/delete_(.+)/, async (ctx) => {
  ctx.session = ctx.session || {};
  const noteId = ctx.match[1];
  await deleteNote(ctx.from.id, noteId);
  await ctx.answerCbQuery("–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞");
  await ctx.deleteMessage();
});

bot.action(/edit_(.+)/, async (ctx) => {
  ctx.session = ctx.session || {};
  ctx.session.editing = ctx.match[1];
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:");
});

// Text message handling
bot.on("text", async (ctx) => {
  ctx.session = ctx.session || {};
  const notes = await fetchNotes(ctx.from.id);

  if (ctx.session.creating) {
    if (!ctx.session.newTitle) {
      ctx.session.newTitle = ctx.message.text;
      await ctx.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:");
      return;
    } else {
      await createNote(ctx.from.id, ctx.session.newTitle, ctx.message.text);
      ctx.session.creating = false;
      ctx.session.newTitle = null;
      await ctx.reply("–ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!");
      return;
    }
  }

  if (ctx.session.editing) {
    const note = notes.find((n) => n.id === ctx.session.editing);
    if (note) {
      await updateNote(ctx.from.id, note.id, note.title, ctx.message.text);
      await ctx.reply("–ó–∞–º–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
    }
    ctx.session.editing = null;
    return;
  }

  if (ctx.session.searchMode) {
    const query = ctx.message.text.trim();
    ctx.session.searchMode = false;
    if (!query) {
      await ctx.reply("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
      return;
    }
    const results = notes.filter(
      (n) =>
        n.title.toLowerCase().includes(query.toLowerCase()) ||
        n.content.toLowerCase().includes(query.toLowerCase())
    );
    if (results.length === 0) {
      await ctx.reply("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
      return;
    }
    for (const note of results) {
      await ctx.replyWithMarkdown(
        `*${note.title}*\n${note.content.slice(0, 100)}${
          note.content.length > 100 ? "‚Ä¶" : ""
        }`,
        Markup.inlineKeyboard([
          [Markup.button.callback("–û—Ç–∫—Ä—ã—Ç—å", `open_${note.id}`)],
        ])
      );
    }
    return;
  }
});

bot.action("show_notes", async (ctx) => {
  ctx.session = ctx.session || {};
  ctx.session.searchMode = false;
  const notes = await fetchNotes(ctx.from.id);
  const buttons = [];
  if (notes.length > 0) {
    for (const note of notes) {
      buttons.push([
        Markup.button.callback(`üìù ${note.title}`, `open_${note.id}`),
        Markup.button.callback("‚ùå", `delete_${note.id}`),
      ]);
    }
  }
  buttons.push([
    Markup.button.callback("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", "create_note"),
    Markup.button.callback("üîç –ü–æ–∏—Å–∫", "search_notes"),
  ]);
  await ctx.reply(
    notes.length ? "–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:" : "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.",
    Markup.inlineKeyboard(buttons)
  );
});

bot.command("search", async (ctx) => {
  ctx.session = ctx.session || {};
  const query = ctx.message.text.split(" ").slice(1).join(" ").trim();
  if (!query) {
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /search –≤–∞–∂–Ω–æ–µ");
    return;
  }
  const notes = await fetchNotes(ctx.from.id);
  const results = notes.filter(
    (n) =>
      n.title.toLowerCase().includes(query.toLowerCase()) ||
      n.content.toLowerCase().includes(query.toLowerCase())
  );
  if (results.length === 0) {
    await ctx.reply("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
    return;
  }
  for (const note of results) {
    await ctx.replyWithMarkdown(
      `*${note.title}*\n${note.content.slice(0, 100)}${
        note.content.length > 100 ? "‚Ä¶" : ""
      }`,
      Markup.inlineKeyboard([
        [Markup.button.callback("–û—Ç–∫—Ä—ã—Ç—å", `open_${note.id}`)],
      ])
    );
  }
});

bot.start(async (ctx) => {
  ctx.session = ctx.session || {};
  await ctx.reply(
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.",
    Markup.inlineKeyboard([
      [
        Markup.button.callback("üìù –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏", "show_notes"),
        Markup.button.callback("üîå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º", "power_menu"),
      ],
    ])
  );

  const notes = await fetchNotes(ctx.from.id);
  const buttons = [];
  if (notes.length > 0) {
    for (const note of notes) {
      buttons.push([
        Markup.button.callback(`üìù ${note.title}`, `open_${note.id}`),
        Markup.button.callback("‚ùå", `delete_${note.id}`),
      ]);
    }
  }
  buttons.push([
    Markup.button.callback("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", "create_note"),
    Markup.button.callback("üîç –ü–æ–∏—Å–∫", "search_notes"),
    Markup.button.callback("üîå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º", "power_menu"),
  ]);
  await ctx.reply(
    notes.length ? "–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:" : "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.",
    Markup.inlineKeyboard(buttons)
  );
});

bot.action("power_menu", async (ctx) => {
  await ctx.reply(
    "üîå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:",
    Markup.inlineKeyboard([
      [
        Markup.button.callback("üü¢ –í–∫–ª—é—á–∏—Ç—å", "power_on"),
        Markup.button.callback("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å", "power_off"),
      ],
      [Markup.button.callback("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", "power_restart")],
    ])
  );
});

// Start both server and bot
app.listen(PORT, () => {
  console.log(`üóíÔ∏è Notes API server running on http://localhost:${PORT}`);
});

bot.launch().then(() => {
  console.log("ü§ñ –ë–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω!");
  console.log("üîå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /power");
});

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
